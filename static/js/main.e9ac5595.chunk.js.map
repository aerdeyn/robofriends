{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","_ref","cardComp","robots","map","user","i","components_Card","key","console","log","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","src_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e9ac5595.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?size=150x150`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2 className = 'tc'>{props.name}</h2>\r\n\t\t\t\t<p  className = 'tc'>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst cardComp = robots.map ( (user,i) => {\r\n\t\treturn <Card key={i} id={user.id} name={user.name} email={user.email}/>;\t\t\t\r\n\t});\r\n\tconsole.log (cardComp);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardComp}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\t\taria-label='Search Robots'\r\n\t\t\t\tclassName=\"pa3 ba b--light-blue bg-lightest-blue\"\r\n\t\t\t\ttype='Search'\r\n\t\t\t\tplaceholder='Search Robots'\r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '550px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper (props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError: true});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Massive Error!!!</h1> // render the error msg, or ...\r\n\t\t}\r\n\t\treturn this.props.children // render whatever is the child of ErrorBoundary\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\t\r\n\tshouldComponentUpdate (nextProps, nextState) {\r\n\t\t// controls whether the component updates or not\r\n\t\tif (this.state.count !== nextState.count) {\r\n\t\t\t// only updates if the state changes\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tconsole.log(this.state.count);\r\n\t\t// done this way to avoid issues with asynchronous behaviour\r\n\t\tthis.setState(state => {\r\n\t\t\treturn {count: state.count + 1}\r\n\t\t})\r\n\t}\r\n\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\t\tClick Count: {this.state.count}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate (nextProps, nextState) {\r\n\t\t// controls whether the component updates or not\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<h1 className = \"ba bg-washed-blue shadow-1\">RoboFriends</h1>\r\n\t\t\t<CounterButton color={'red'}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport {robots} from '../robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\t// what state do I need to listen to\r\n\t// and send it down as props\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\t// what propos do I listen to\r\n\t// that are actions that need to get dispatched\r\n\treturn {\r\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => requestRobots(dispatch)\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t// constructor() {\r\n\t//\tsuper();\r\n\t//\tthis.state = {\r\n\t//\t\trobots: [] //,\r\n\t//\t\t// searchfield: ''\r\n\t//\t}\r\n\t// }\r\n\r\n\tcomponentDidMount() {\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t//\t.then(response=> response.json())\r\n\t\t//\t.then(users => this.setState({robots: users}));\r\n\t\t\r\n\t\t// this.setState({robots: robots});\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t// onSearchChange = (event) => {\r\n\t//\tthis.setState({searchfield: event.target.value})\r\n\t// }\r\n\r\n\trender () {\r\n\t\t// const { robots } = this.state;\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\t\r\n\t\t// const filteredRobots = this.state.robots.filter(robot => {\r\n\t\t//\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t// })\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\tif (isPending) {\r\n\t\t\treturn <h2>Loading ...</h2>\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className = \"tc\">\r\n\t\t\t\t\t<Header/>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n// 'connect' is a higher order function (function that returns a function)","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n\t// return an object with the following properties\r\n\treturn {\r\n\t\ttype: CHANGE_SEARCH_FIELD, // constant\r\n\t\tpayload: text\r\n\t}\r\n}\r\n\r\n\r\nexport const requestRobots = (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\r\n\t// fetch the users asynchronously from the remote API\r\n\t// then return the \r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data})) // dispatch the data from the API\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\t// the reducer is a PURE FUNCTION that comverts\r\n\t// the action to a change in state and returns it to the store\r\n\t// console.log(action.type);\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\t// copy 'action.payload' to the same field in the 'state' object\r\n\t\t\t// and return it to the store\r\n\t\t\treturn Object.assign({}, state,{searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\t// no change to state\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\t// the reducer is a PURE FUNCTION that comverts\r\n\t// the action to a change in state and returns it to the store\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign ({}, state, { isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign ({}, state, { robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign ({}, state, { error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'; // logging middleware for redux\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n\t// Provider wraps the App and passes down the store to all components in the tree\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register(); //CLL now running the service worker!\n"],"sourceRoot":""}